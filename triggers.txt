CREATE OR REPLACE FUNCTION appstatus() RETURNS TRIGGER AS $$
DECLARE
holder_post VARCHAR;
holder_dept int;
holder_id int;
status_i VARCHAR;
cur_status_id int;
time_sec int;
time_days int;
fac_id_orig int;
fac_post_orig VARCHAR;
BEGIN
select into fac_id_orig faculty_id from application where application_id=NEW.application_id;
select into fac_post_orig post from faculty where faculty_id = fac_id_orig;
if NEW.action_taken ='backward' then
  if NEW.post = 'Director' Then
    select into holder_post faculty.post from application, faculty where application.faculty_id=faculty.faculty_id and application.application_id=NEW.application_id;
  else
    select into holder_post sender from application_route where application_route.receiver=NEW.post;
  end if;
elseif NEW.post = 'Director' Then
  holder_post = 'DBAdmin'
elseif NEW.action_taken = 'submitted' and NEW.post <> 'Faculty' Then
  holder_post = 'Director';
elseif fac_post_orig = 'HOD' or fac_post_orig='DeanFA' or fac_post_orig='DeanAFA' then
  holder_post = 'Director';
else
  select into holder_post receiver from application_route where application_route.sender=NEW.post;
end if;
if not found Then
  status_i = 'Passed';
else
  status_i = 'Pending';
end if;

if holder_post='DBAdmin' Then
  status_i = 'Passed';
end if;

if status_i = 'Passed' Then
  SELECT into time_sec EXTRACT(EPOCH FROM (end_date - start_date)) from application where application_id=NEW.application_id;
  time_days = time_sec/86400;
  select into fac_id_orig faculty_id from application where application_id=NEW.application_id;
  UPDATE faculty set leaves_remaining=leaves_remaining-time_days where faculty_id=fac_id_orig;
end if;

if holder_post = 'HOD' then
  select into holder_dept faculty.department_id from application, faculty, application_log where application_log.application_id=application.application_id and application.faculty_id=faculty.faculty_id and application_log.application_id=NEW.application_id;
  select into holder_id hod.faculty_id from hod where hod.dept_id = holder_dept;
elseif holder_post = 'Faculty' then
	select into holder_id faculty_id from application where application_id=NEW.application_id;
else
  select into holder_id special_posts.faculty_id from special_posts where special_posts.post=holder_post;
END if;
select into cur_status_id status_id from current_status where current_status.status_id=NEW.application_id;
if not found Then
  INSERT INTO current_status(status_id, current_holder_post, current_holder_id, status, borrowed_leaves) values (NEW.application_id, holder_post, holder_id,status_i,0);
else
  UPDATE current_status set current_holder_post=holder_post, current_holder_id=holder_id, status=status_i where status_id=cur_status_id;
end if;
RETURN NEW;
END; $$
LANGUAGE PLPGSQL;


CREATE TRIGGER app_status AFTER INSERT ON application_log
FOR EACH ROW EXECUTE PROCEDURE appstatus();

CREATE OR REPLACE FUNCTION updatehod(dept_name_ch text, faculty_id_ch int) RETURNS void AS $$
DECLARE
dept_id_ch int;
old_faculty int;
BEGIN
  select into dept_id_ch department_id from department where dept_name=dept_name_ch;
  select into old_faculty faculty_id from hod_logs where dept_id=dept_id_ch;
  if not found Then
    INSERT INTO hod(dept_id,faculty_id) values(dept_id_ch, faculty_id_ch);
    INSERT INTO hod_logs(faculty_id,dept_id,start_date) values(faculty_id_ch, dept_id_ch, NOW());
    UPDATE faculty set post='HOD' where faculty_id=faculty_id_ch;
  else
    UPDATE hod set faculty_id=faculty_id_ch where dept_id=dept_id_ch;
    UPDATE hod_logs set end_date=NOW() where faculty_id=old_faculty;
    UPDATE faculty set post='HOD' where faculty_id=faculty_id_ch;
    UPDATE faculty set post='Faculty' where faculty_id=old_faculty;
    INSERT INTO hod_logs(faculty_id,dept_id,start_date) values(faculty_id_ch, dept_id_ch, NOW());
  end if;
END; $$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION updatespecialpost(special_post_name text, faculty_id_ch int) RETURNS void AS $$
DECLARE
old_faculty int;
BEGIN
  select into old_faculty faculty_id from special_posts where post=special_post_name;
  if not found Then
    INSERT INTO special_posts(faculty_id, post) values(faculty_id_ch, special_post_name);
    INSERT INTO special_logs(faculty_id, post, start_date) values(faculty_id_ch, special_post_name, NOW());
    UPDATE faculty set post=special_post_name where faculty_id=faculty_id_ch;
  else
    UPDATE special_posts set faculty_id=faculty_id_ch where post=special_post_name;
    UPDATE special_logs set end_date=NOW() where faculty_id=old_faculty;
    UPDATE faculty set post=special_post_name where faculty_id=faculty_id_ch;
    UPDATE faculty set post='Faculty' where faculty_id=old_faculty;
    INSERT INTO special_logs(faculty_id, post, start_date) values(faculty_id_ch, special_post_name, NOW());
  end if;
END; $$
LANGUAGE PLPGSQL;


CREATE OR REPLACE FUNCTION checkapplication() RETURNS TRIGGER AS $$
DECLARE
old_faculty int;
BEGIN
  select into old_faculty faculty_id from application, current_status where application.faculty_id=NEW.faculty_id and application.application_id=current_status.status_id and current_status.status='Pending';
  if found then
    RAISE EXCEPTION 'Two Applications cannot be submitted.';
  end if;
  RETURN NEW;
END; $$
LANGUAGE PLPGSQL;

CREATE TRIGGER check_application BEFORE INSERT ON application
FOR EACH ROW EXECUTE PROCEDURE appstatus();
